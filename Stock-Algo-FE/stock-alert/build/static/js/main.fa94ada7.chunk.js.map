{"version":3,"sources":["Notification.js","StockFetchDisplay.js","App.js","index.js"],"names":["toast","configure","Notification","props","synthRef","React","useRef","window","speechSynthesis","useEffect","setInterval","stocksNotified","map","stock","name","notify","signalText","utter","SpeechSynthesisUtterance","current","speak","StockFetchDisplay","onClickOpenStockInAvanza","open","website","displayNotifiedStocks","className","scope","state","idx","onClick","timeOfBuySignal","entry","displayDownTrendStocks","downTrend","lastPrice","displayUpTrendStocks","upTrend","this","url","topics","onConnect","console","log","onDisconnect","onMessage","resp","setState","ref","client","clientRef","Component","App","ReactDOM","render","document","getElementById"],"mappings":"mQAOAA,IAAMC,YAsCSC,MApCf,SAAsBC,GAIpB,IAAMC,EAAWC,IAAMC,OAAOC,OAAOC,iBAOrCC,qBAAU,WACRC,aAAY,WACVP,EAAMQ,eAAeC,KAAI,SAACC,GACxBb,YAAM,eAAiBa,EAAMC,MAC7BC,EAAO,eAAiBF,EAAMC,WAG/B,OACF,IAOH,IAAMC,EAAS,SAACC,GACd,IAAMC,EAAQ,IAAIC,yBAAyBF,GAC3CZ,EAASe,QAAQC,MAAMH,IAEzB,OACE,yBCgHWI,E,kDAlJb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAWRmB,yBAA2B,SAACT,GAC1BN,OAAOgB,KAAK,KAAOV,EAAMW,QAAS,WAbjB,EAmBnBC,sBAAwB,WACtB,OACE,sBAAKC,UAAU,gBAAf,UACE,iDACA,wBAAOA,UAAU,wCAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,wBAGJ,gCACG,EAAKC,MAAMjB,eAAeC,KAAI,SAACC,EAAOgB,GACrC,OACE,qBAAcC,QAAS,kBAAM,EAAKR,yBAAyBT,IAA3D,UACE,6BAAKA,EAAMkB,kBACX,6BAAKlB,EAAMC,OACX,6BAAKD,EAAMmB,UAHJH,eAlCJ,EAkDnBI,uBAAyB,WACvB,OACE,sBAAKP,UAAU,gBAAf,UACE,4CACA,wBAAOA,UAAU,wCAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,wBAGJ,gCACG,EAAKC,MAAMM,UAAUtB,KAAI,SAACC,EAAOgB,GAChC,OACE,qBAAcC,QAAS,kBAAM,EAAKR,yBAAyBT,IAA3D,UACE,6BAAKA,EAAMC,OACX,6BAAKD,EAAMsB,YACX,6BAAKtB,EAAMmB,UAHJH,eAjEJ,EAiFnBO,qBAAuB,WACrB,OACE,sBAAKV,UAAU,gBAAf,UACE,0CACA,wBAAOA,UAAU,wCAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,wBAGJ,gCACG,EAAKC,MAAMS,QAAQzB,KAAI,SAACC,EAAOgB,GAC9B,OACE,qBAAcC,QAAS,kBAAM,EAAKR,yBAAyBT,IAA3D,UACE,6BAAKA,EAAMC,OACX,6BAAKD,EAAMsB,YACX,6BAAKtB,EAAMmB,UAHJH,eA9FrB,EAAKD,MAAQ,CACXS,QAAS,GACTH,UAAW,GACXvB,eAAgB,IALD,E,qDA6GT,IAAD,OACP,OAME,cALA,CAKA,OAAKe,UAAU,MAAf,UACGY,KAAKF,uBACLE,KAAKL,yBACLK,KAAKb,wBACN,cAAC,EAAD,CAAcd,eAAgB2B,KAAKV,MAAMjB,iBAEzC,cAAC,IAAD,CAAc4B,IAAI,2CAChBC,OAAQ,CAAC,gBACTC,UAAW,WACTC,QAAQC,IAAI,cAEdC,aAAc,WACZF,QAAQC,IAAI,iBAEdE,UAAW,SAACC,GACV,EAAKC,SAAS,CACZV,QAASS,EAAKT,QACdH,UAAWY,EAAKZ,UAChBvB,eAAgBmC,EAAKnC,kBAGzBqC,IAAK,SAACC,GACJ,EAAKC,UAAYD,Y,GA3IGE,aCIjBC,MANf,WACE,OACE,cAAC,EAAD,KCDJC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fa94ada7.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { toast } from 'react-toastify';\n\n/**\n * Configuring the toast library for visual notifications\n */\ntoast.configure();\n\nfunction Notification(props) {\n  /**\n   * Getting the reference of the window speech synthesis and assigning it\n   */\n  const synthRef = React.useRef(window.speechSynthesis);\n\n  /**\n   * Use Effect - React hook that is called when component is rendered\n   * Set interval - This function is called every 30 seconds\n   * If user has not been notified about the stock, notify the user using a visual and audible notification\n   */\n  useEffect(() => {\n    setInterval(() => {\n      props.stocksNotified.map((stock) => {\n        toast(\"Buy Signal: \" + stock.name);\n        notify(\"Buy Signal: \" + stock.name)\n      }\n      );\n    }, 3_000);\n  }, []\n  );\n\n  /**\n   * Utters the notification text it recieves.\n   * @param {*} signalText \n   */\n  const notify = (signalText) => {\n    const utter = new SpeechSynthesisUtterance(signalText)\n    synthRef.current.speak(utter);\n  }\n  return (\n    <div>\n    </div>\n  );\n}\n\nexport default Notification;","import React, { Component } from 'react';\nimport SockJsClient from 'react-stomp';\nimport './css/StockFetchDisplay.css';\nimport Notification from './Notification';\n\nclass StockFetchDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      upTrend: [],\n      downTrend: [],\n      stocksNotified: []\n    }\n  }\n\n  /**\n   * Open Stock page in Avanza When clicking on the stock\n   */\n  onClickOpenStockInAvanza = (stock) => {\n    window.open(\"//\" + stock.website, '_blank');\n  }\n\n  /**\n   * Display all the stocks that I've been notified about\n   */\n  displayNotifiedStocks = () => {\n    return (\n      <div className=\"ml-6 col-sm-3\">\n        <h1>Stocks Notified</h1>\n        <table className=\"table table-striped table-responsive \">\n          <thead>\n            <tr>\n              <th scope=\"col\">Time</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Entry</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.stocksNotified.map((stock, idx) => {\n              return (\n                <tr key={idx} onClick={() => this.onClickOpenStockInAvanza(stock)}>\n                  <td>{stock.timeOfBuySignal}</td>\n                  <td>{stock.name}</td>\n                  <td>{stock.entry}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  /**\n   * Display all the stocks that are in a downward trend\n   */\n  displayDownTrendStocks = () => {\n    return (\n      <div className=\"ml-6 col-sm-3\">\n        <h1>Down Trend</h1>\n        <table className=\"table table-striped table-responsive \">\n          <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Senast</th>\n              <th scope=\"col\">Entry</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.downTrend.map((stock, idx) => {\n              return (\n                <tr key={idx} onClick={() => this.onClickOpenStockInAvanza(stock)}>\n                  <td>{stock.name}</td>\n                  <td>{stock.lastPrice}</td>\n                  <td>{stock.entry}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  /**\n   * Display all the stocks that are in a upward trend\n   */\n  displayUpTrendStocks = () => {\n    return (\n      <div className=\"ml-6 col-sm-3\">\n        <h1>Up Trend</h1>\n        <table className=\"table table-striped table-responsive \">\n          <thead>\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Senast</th>\n              <th scope=\"col\">Entry</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.upTrend.map((stock, idx) => {\n              return (\n                <tr key={idx} onClick={() => this.onClickOpenStockInAvanza(stock)}>\n                  <td>{stock.name}</td>\n                  <td>{stock.lastPrice}</td>\n                  <td>{stock.entry}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      /**\n       * Display the stocks in a row\n       * Notification - Send all stocks that are in notified list to the Notification component\n       * SockJSClient - Accept the data sent from the backend and assign to the lists within the state of the component\n       */\n      <div className=\"row\">\n        {this.displayUpTrendStocks()}\n        {this.displayDownTrendStocks()}\n        {this.displayNotifiedStocks()}\n        <Notification stocksNotified={this.state.stocksNotified} />\n\n        <SockJsClient url='http://hitechdynasty.se:8085/stock-list/'\n          topics={['/topic/stock']}\n          onConnect={() => {\n            console.log(\"connected\");\n          }}\n          onDisconnect={() => {\n            console.log(\"Disconnected\");\n          }}\n          onMessage={(resp) => {\n            this.setState({\n              upTrend: resp.upTrend,\n              downTrend: resp.downTrend,\n              stocksNotified: resp.stocksNotified\n            })\n          }}\n          ref={(client) => {\n            this.clientRef = client\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default StockFetchDisplay;","import React from 'react';\nimport StockFetchDisplay from './StockFetchDisplay';\n\nfunction App() {\n  return (\n    <StockFetchDisplay />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}